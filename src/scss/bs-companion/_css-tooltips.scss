// This is not ideal and does not work great for all content width and positionning
// Unless your use of tooltips is very basic, it's better to rely on js for this
span[data-tooltip] {
  text-decoration: underline;
  text-decoration-style: dotted;
}
[data-tooltip] {
  --tooltip-width: #{$tooltip-max-width * 0.5};
  --tooltip-offset: 5px;

  cursor: help;
  position: relative;

  &::after {
    position: absolute;
    z-index: $zindex-tooltip;
    display: none;
    margin: $tooltip-margin;
    // Our parent element can be arbitrary since tooltips are by default inserted as a sibling of their target element.
    // So reset our font and text properties to avoid inheriting weird values.
    @include reset-text();
    @include font-size($tooltip-font-size);
    // Allow breaking very long words so they don't overflow the tooltip's bounds
    word-wrap: break-word;
    opacity: 0;
    // Content
    width: var(--tooltip-width);
    max-width: $tooltip-max-width;
    padding: $tooltip-padding-y $tooltip-padding-x;
    color: $tooltip-color;
    text-align: center;
    background-color: $tooltip-bg;
    @include border-radius($tooltip-border-radius);
    content: attr(data-tooltip);
    top: 0;
    left: 50%;
    transform: translate(-50%, calc(-100% - var(--tooltip-offset) * 2));
  }

  // Arrow
  &::before {
    background-color: $tooltip-bg;
    content: " ";
    display: none;
    position: absolute;
    width: $tooltip-arrow-width;
    height: $tooltip-arrow-width;
    z-index: $zindex-tooltip;
    opacity: 0;
    top: 0;
    left: 50%;
    transform: translate(-50%, calc(-100% - var(--tooltip-offset)))
      rotate(45deg);
  }

  &.bottom,
  &[data-bs-placement="bottom"] {
    &::before,
    &::after {
      top: auto;
      bottom: 0;
      left: 50%;
      transform: translate(-50%, calc(100% + var(--tooltip-offset) * 2));
    }
    &::before {
      transform: translate(-50%, calc(100% + var(--tooltip-offset)))
        rotate(45deg);
    }
  }
  &.left,
  &[data-bs-placement="left"] {
    &::before,
    &::after {
      top: 50%;
      left: 0;
      transform: translateX(calc(-100% - var(--tooltip-offset) * 2));
    }
    &::before {
      transform: translate(calc(-100% - var(--tooltip-offset)), -50%)
        rotate(45deg);
    }
  }
  &.right,
  &[data-bs-placement="right"] {
    &::before,
    &::after {
      top: 50%;
      left: auto;
      right: 0;
      transform: translateX(calc(100% + var(--tooltip-offset) * 2));
    }
    &::before {
      transform: translate(calc(100% + var(--tooltip-offset)), -50%)
        rotate(45deg);
    }
  }

  // Show on hover and focus
  &:hover,
  &:focus {
    &::after,
    &::before {
      display: block;
      opacity: 1;
      transition: ease-out 0.25s;
    }
  }
}
